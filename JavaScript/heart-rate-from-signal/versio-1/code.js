const data = [
	32703,
	32755,
	32839,
	32912,
	32960,
	33000,
	32992,
	33000,
	32976,
	33060,
	33128,
	33312,
	33424,
	33448,
	33520,
	33496,
	33472,
	33384,
	33320,
	33192,
	33116,
	33004,
	32912,
	32848,
	32868,
	32852,
	32896,
	32952,
	32980,
	33056,
	33168,
	33228,
	33200,
	33220,
	33136,
	33016,
	32899,
	32731,
	32643,
	32479,
	32407,
	32375,
	32407,
	32387,
	32519,
	32663,
	32880,
	33008,
	33100,
	33216,
	33292,
	33304,
	33456,
	33660,
	33768,
	34016,
	34112,
	34212,
	34336,
	34256,
	34152,
	33932,
	33672,
	33404,
	33132,
	32932,
	32695,
	32587,
	32615,
	32723,
	32787,
	32972,
	33032,
	33144,
	33232,
	33332,
	33320,
	33284,
	33204,
	33212,
	33204,
	33120,
	33012,
	33000,
	32884,
	32804,
	32667,
	32615,
	32599,
	32659,
	32767,
	32771,
	32939,
	33108,
	33112,
	33160,
	33276,
	33460,
	33464,
	33408,
	33388,
	33276,
	33204,
	33192,
	33196,
	33232,
	33184,
	33176,
	33120,
	33064,
	33100,
	33240,
	33368,
	33456,
	33560,
	33572,
	33600,
	33612,
	33524,
	33468,
	33320,
	33116,
	32956,
	32856,
	32791,
	32767,
	32832,
	32876,
	33028,
	33204,
	33464,
	33636,
	33804,
	33876,
	33832,
	33780,
	33584,
	33308,
	33088,
	32876,
	32691,
	32595,
	32463,
	32447,
	32655,
	32840,
	32996,
	33048,
	33108,
	33176,
	33152,
	33224,
	33176,
	33160,
	33100,
	33016,
	32996,
	32884,
	32807,
	32743,
	32723,
	32655,
	32603,
	32659,
	32771,
	33040,
	33328,
	33620,
	33936,
	34180,
	34308,
	34316,
	34148,
	33964,
	33704,
	33384,
	33160,
	32892,
	32747,
	32591,
	32519,
	32535,
	32587,
	32603,
	32751,
	32864,
	32960,
	33056,
	33192,
	33296,
	33380,
	33352,
	33288,
	33140,
	33120,
	32992,
	32932,
	32932,
	32932,
	33004,
	33092,
	33140,
	33104,
	33076,
	33172,
	33300,
	33532,
	33892,
	34372,
	34728,
	34912,
	34952,
	34876,
	34688,
	34424,
	34128,
	33752,
	33484,
	33184,
	32956,
	32699,
	32599,
	32719,
	32899,
	33104,
	33368,
	33480,
	33596,
	33648,
	33564,
	33472,
	33292,
	33260,
	33200,
	33100,
	33096,
	33052,
	32988,
	32968,
	32940,
	32972,
	32940,
	32944,
	32976,
	32916,
	32896,
	33020,
	33092,
	33340,
	33796,
	34324,
	34792,
	35292,
	35436,
	35508,
	35260,
	34836,
	34444,
	33996,
	33524,
	33252,
	33020,
	32803,
	32683,
	32591,
	32571,
	32743,
	33068,
	33300,
	33452,
	33568,
	33612,
	33504,
	33340,
	33096,
	32976,
	32815,
	32751,
	32623,
	32655,
	32579,
	32515,
	32535,
	32595,
	32683,
	32839,
	32888,
	32864,
	32856,
	32840,
	32800,
	32904,
	33064,
	33352,
	33736,
	34188,
	34496,
	34840,
	35064,
	35136,
	35072,
	34816,
	34516,
	34084,
	33692,
	33264,
	32944,
	32715,
	32463,
	32431,
	32399,
	32463,
	32635,
	32932,
	33144,
	33328,
	33384,
	33460,
	33404,
	33364,
	33228,
	33132,
	32956,
	32707,
	32527,
	32467,
	32379,
	32323,
	32295,
	32271,
	32287,
	32287,
	32323,
	32335,
	32355,
	32447,
	32511,
	32539,
	32547,
	32619,
	32831,
	33052,
	33344,
	33704,
	33968,
	34132,
	34132,
	34012,
	33856,
	33560,
	33292,
	32960,
	32683,
	32439,
	32407,
	32343,
	32295,
	32423,
	32639,
	32888,
	33112,
	33292,
	33420,
	33480,
	33492,
	33468,
	33396,
	33340,
	33248,
	33012,
	32872,
	32571,
	32447,
	32371,
	32363,
	32471,
	32503,
	32479,
	32471,
	32483,
	32571,
	32599,
	32707,
	32715,
	32695,
	32715,
	32715,
	32844,
	33016,
	33272,
	33620,
	33968,
	34188,
	34368,
	34252,
	34032,
	33708,
	33372,
	33148,
	32823,
	32551,
	32383,
	32287,
	32275,
	32311,
	32375,
	32507,
	32651,
	32851,
	32996,
	33108,
	33152,
	33080,
	33024,
	32900,
	32767,
	32679,
	32611,
	32487,
	32443,
	32415,
	32419,
	32379,
	32291,
	32303,
	32267,
	32303,
	32283,
	32267,
	32323,
	32371,
	32455,
	32471,
	32519,
	32639,
	32715,
	32944,
	33076,
	33292,
	33396,
	33528,
	33512,
	33456,
	33312,
	33148,
	32960,
	32787,
	32643,
	32499,
	32383,
	32295,
	32219,
	32203,
	32203,
	32319,
	32475,
	32691,
	32916,
	33004,
	33032,
	33052,
	33028,
	33092,
	32992,
	32936,
	32852,
	32723,
	32559,
	32487,
	32427,
	32431,
	32499,
	32571,
	32631,
	32675,
	32719,
	32635,
	32635,
	32563,
	32475,
	32547,
	32707,
	32876,
	33060,
	33256,
	33484,
	33632,
	33752,
	33740,
	33580,
	33388,
	33172,
	32964,
	32832,
	32599,
	32515,
	32363,
	32399,
	32411,
	32475,
	32595,
	32611,
	32735,
	32828,
	32912,
	32876,
	32900,
	32944,
	32976,
	32916,
	32888,
	32779,
	32779,
	32639,
	32555,
	32499,
	32387,
	32423,
	32459,
	32471,
	32471,
	32543,
	32535,
	32623,
	32671,
	32659,
	32671,
	32691,
	32832,
	32992,
	33244,
	33476,
	33652,
	33824,
	33840,
	33832,
	33668,
	33536,
	33308,
	33076,
	33052,
	32900,
	32747,
	32643,
	32591,
	32735,
	32872,
	33016,
	33092,
	33072,
	33128,
	33164,
	33212,
	33160,
	33176,
	33188,
	33212,
	33200,
	33148,
	33056,
	32956,
	32808,
	32699,
	32659,
	32663,
	32731,
	32880,
	32992,
	33052,
	33100,
	33024,
	32964,
	32884,
	32916,
	33104,
	33356,
	33652,
	33968,
	34212,
	34264,
	34264,
	34188,
	34028,
	33608,
	33236,
	33080,
	32928,
	32795,
	32852,
	32944,
	33124,
	33320,
	33520,
	33600,
	33684,
	33768,
	33800,
	33764,
	33764,
	33676,
	33536,
	33332,
	33148,
	33016,
	32968,
	32920,
	32912,
	32880,
	32896,
	32912,
	32992,
	32940,
	33024,
	33132,
	33184,
	33236,
	33428,
	33704,
	34004,
	34352,
	34684,
	34892,
	34992,
	35016,
	34884,
	34692,
	34384,
	34064,
	33776,
	33364,
	33176,
	32920,
	32707,
	32595,
	32547,
	32743,
	33080,
	33368,
	33528,
	33684,
	33636,
	33528,
	33380,
	33232,
	33192,
	33128,
	33080,
	33132,
	33056,
	32980,
	32803,
	32519,
	32427,
	32155,
	32211,
	32327,
	32603,
	32904,
	33248,
	33504,
	33740,
	34048,
	34384,
	34708,
	35072,
	35308,
	35416,
	35312,
	35108,
	34740,
	34276,
	33772,
	33324,
	32992,
	32611,
	32375,
	32255,
	32351,
	32447,
	32635,
	32992,
	33328,
	33684,
	34016,
	34092,
	34144,
	34072,
	33892,
	33748,
	33588,
	33580,
	33432,
	33364,
	33176,
	32988,
	32812,
	32591,
	32555,
	32599,
	32699,
	32876,
	33136,
	33480,
	33908,
	34464,
	34904,
	35224,
	35384,
	35404,
	35292,
	35068,
	34744,
	34372,
	33952,
	33564,
	33104,
	32783,
	32611,
	32523,
	32583,
	32703,
	32924,
	33152,
	33408,
	33612,
	33768,
	33740,
	33612,
	33468,
	33336,
	33196,
	33112,
	32984,
	32904,
	32832,
	32735,
	32675,
	32587
];

const newData = Array(data.length).fill("");

let min = 0;
let max = 0;
let maxIndex = 0;
let state = "up";
let differ = 200;

let buffer = []

data.forEach((value, index) => {
	if (state === "up") {
		if (value > max) {
			max = value;
			maxIndex = index
		} else if (value < max - differ) {
			state = "down";
			min = value;

			buffer.push({ max, maxIndex })

			if (buffer.length < 3) return
			if (buffer.at(-2).max < buffer.at(-1).max) return
			if (buffer.at(-2).max < buffer.at(-3).max) return

			const withoutLastPeak = buffer.slice(0, -2)
			const peakIndex = withoutLastPeak.sort((a, b) => b.max - a.max)[0].maxIndex
			newData[peakIndex] = 40000;
			newData[peakIndex + 1] = 20000;

			buffer = buffer.slice(-2)
		}
	} else {
		if (value < min) min = value;
		else if (value > min + differ) {
			state = "up";
			max = value;
		}
	}
});

document.querySelector("textarea").value = newData.join("\n");